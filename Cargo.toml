[package]
name = "pandrs"
version = "0.1.0-alpha.5"
edition = "2021"
description = "High-performance DataFrame library for Rust with pandas-like API, GPU acceleration, and distributed computing (Final Alpha Release)"
authors = ["Cool Japan"]
license = "Apache-2.0"
repository = "https://github.com/cool-japan/pandrs"
readme = "README.md"
keywords = ["dataframe", "data", "analytics", "pandas", "statistics"]
categories = ["data-structures", "science", "mathematics"]
exclude = ["tests/", "benches/", "docs/", "examples/", ".github/"]

[dependencies]
num-traits = "0.2.19"
chrono = { version = "0.4.38", features = ["serde"] }
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.140"
serde_yaml = "0.9.34"  # YAML serialization support
toml = "0.8.8"  # TOML serialization support
thiserror = "2.0.12"
csv = "1.3.1"
rand = "0.9.0"  # Random number generation
chrono-tz = "0.9.0"  # Timezone processing - compatible with chrono 0.4.38
num_cpus = "1.16.0"  # For CPU core detection
# Due to compatibility issues with plotters, using textplots-rs (text-based plots)
textplots = { version = "0.8.7", optional = true }  # For visualization features (text-based)
rayon = "1.10.0"  # For parallel processing
regex = "1.11.1"  # For regular expression processing
lazy_static = "1.5.0"  # For global variables/singletons
url = "2.5.0"  # URL parsing for configuration validation
dirs = "5.0.1"  # Platform-specific user directories
pbkdf2 = "0.12.2"  # PBKDF2 key derivation for credential security
sha2 = "0.10.8"  # SHA-2 cryptographic hash functions
aes-gcm = "0.10.3"  # AES-GCM encryption for secure credential storage
async-trait = "0.1.75"  # Async trait support for mock implementations
# Enable Parquet support with latest version - updated for chrono compatibility
parquet = { version = "53.3.1", optional = true }  # For Parquet file support
arrow = { version = "53.3.1", optional = true }  # For Arrow format support
plotters = { version = "0.3.7", optional = true }
# For streaming data support
crossbeam-channel = "0.5.15"  # For concurrent message passing
memmap2 = "0.9.5"  # For memory-mapped files
# Excel support
calamine = { version = "0.23.1", optional = true }  # For Excel reading
simple_excel_writer = { version = "0.2.0", optional = true }  # For Excel writing
# SQL support
sqlx = { version = "0.7.3", features = ["runtime-tokio", "mysql", "postgres", "sqlite"], optional = true }
rusqlite = { version = "0.30.0", optional = true }  # SQLite support

# WebAssembly support (optional)
wasm-bindgen = { version = "0.2.91", optional = true }  # WebAssembly bindings
js-sys = { version = "0.3.68", optional = true }  # JavaScript interop
web-sys = { version = "0.3.68", features = [
    "Document", "Element", "HtmlCanvasElement", "Window",
    "CanvasRenderingContext2d", "MouseEvent", "console"
], optional = true }  # Web API bindings
plotters-canvas = { version = "0.3.0", optional = true }  # Canvas backend for plotters

# CUDA support (optional) - requires CUDA toolkit installation
cudarc = { version = "0.10.0", optional = true, default-features = false }  # CUDA bindings
half = { version = "2.3.1", optional = true }  # Half-precision floating point support
ndarray = { version = "0.15.6", optional = true } # N-dimensional arrays

# Distributed processing support (optional) - downgraded for chrono compatibility
datafusion = { version = "30.0.0", optional = true }  # DataFrame processing engine
uuid = { version = "1.4.1", features = ["v4", "serde"], optional = true }  # For unique IDs in distributed processing and serving
futures = { version = "0.3.30", optional = true }  # For async operations in distributed processing
tokio = { version = "1.40", features = ["full"], optional = true }  # Async runtime for streaming and resilience
log = "0.4.20"  # Logging interface

# JIT compilation support (optional)
cranelift = { version = "0.109.0", optional = true }  # JIT compiler
cranelift-module = { version = "0.109.0", optional = true }  # Module system for JIT
cranelift-jit = { version = "0.109.0", optional = true }  # JIT compilation backend
cranelift-frontend = { version = "0.109.0", optional = true }  # Frontend for building IR
cranelift-native = { version = "0.109.0", optional = true }  # Native target detection
target-lexicon = { version = "0.12.14", optional = true }  # Target specification

[features]
default = []
optimized = []  # Flag for optimized implementation
jit = ["cranelift", "cranelift-module", "cranelift-jit", "cranelift-frontend", "cranelift-native", "target-lexicon"]  # Just-In-Time compilation support
backward_compat = []  # Backward compatibility for older APIs
wasm = ["wasm-bindgen", "js-sys", "web-sys", "plotters-canvas", "visualization"]  # WebAssembly support
cuda = ["cudarc", "half", "ndarray"]  # CUDA support (requires CUDA toolkit)
distributed = ["datafusion", "uuid", "dep:arrow", "dep:parquet", "dep:futures"]  # Distributed processing support
serving = ["uuid", "dep:tokio", "dep:futures"]  # Model serving and deployment support
excel = ["simple_excel_writer", "calamine"]  # Excel support
visualization = ["textplots", "plotters"]  # Visualization support
parquet = ["dep:arrow", "dep:parquet"]  # Parquet file support
sql = ["dep:sqlx"]  # SQL support
streaming = ["dep:tokio", "dep:futures"]  # Streaming data processing support

# Feature bundle for testing core features without external dependencies
test-core = ["optimized", "backward_compat", "streaming"]

# Feature bundle for testing most features without CUDA/WASM (visualization has compilation issues)
test-safe = ["optimized", "parquet", "excel", "sql", "streaming", "backward_compat"]

# Feature bundle for all safe features (excludes CUDA/WASM/distributed which require external tools)  
all-safe = ["optimized", "serving", "parquet", "excel", "sql", "streaming", "backward_compat", "resilience"]

# Feature bundle that works reliably for CI/development (most stable features)
stable = ["optimized", "parquet", "excel", "sql", "streaming", "backward_compat"]

# Resilience patterns (retry mechanisms, circuit breakers)
resilience = ["dep:tokio"]

[dependencies.tempfile]
version = "3.8.1"  # Create temporary files and directories

[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }

[[bench]]
name = "comprehensive_benchmark"
harness = false

[[bench]]
name = "enhanced_comprehensive_benchmark"
harness = false

[[bench]]
name = "regression_benchmark"
harness = false

[[bench]]
name = "profiling_benchmark"
harness = false

[[bench]]
name = "legacy_dataframe_bench"
harness = false

[[bench]]
name = "pandas_comparison_benchmark"
harness = false
